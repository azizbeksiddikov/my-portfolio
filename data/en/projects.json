{
  "projects": [
    {
      "id": 1,
      "priority": 1,
      "image": "/project_images/tensor.jpeg",
      "title": "Handwritten Digit Classification with TensorFlow",
      "description": "This project classifies handwritten digits from the MNIST dataset using a Convolutional Neural Network (CNN) built with TensorFlow. The dataset consists of grayscale images of digits (0-9), each 28x28 pixels. The project includes data preprocessing, model training, and visualization of predictions. It showcases the effectiveness of CNNs in image classification tasks.",
      "category": ["Machine Learning", "Computer Vision"],
      "techStack": ["Python", "TensorFlow", "NumPy", "Matplotlib"],
      "link": "https://github.com/azizbeksiddikov/handwritten-digit-classification"
    },
    {
      "id": 2,
      "priority": 1,
      "image": "/project_images/yolo.svg",
      "title": "Open-Images vs COCO: YOLO Pretrained Models Analysis",
      "description": "This project compares the performance of YOLO pretrained models on object detection tasks using the Open Images and COCO datasets. It evaluates the models' accuracy, speed, and efficiency across diverse scenarios, including image and video data. The analysis provides insights into the strengths, weaknesses, and dataset-specific challenges for YOLO models, using metrics such as inference speed, bounding box confidence, and temporal consistency.",
      "category": ["Machine Learning", "Computer Vision", "Model Evaluation"],
      "techStack": ["Python", "PyTorch", "YOLOv11", "OpenCV", "Matplotlib"],
      "link": "https://github.com/azizbeksiddikov/open-images-vs-coco"
    },
    {
      "id": 3,
      "priority": 0,
      "image": "/project_images/singapore.jpg",
      "title": "Singapore Resale Flat Prices (2017-2024)",
      "description": "This project analyzes the resale prices of HDB flats in Singapore using data from 2017 to 2024. It includes exploratory data analysis, visualization, and the development of predictive models to estimate housing prices. Factors such as flat type, location, and lease details are examined to uncover trends and insights. Advanced regression models and neural networks are applied to predict prices, while geocoding enhances geographic analysis. The results provide actionable insights for stakeholders in the real estate market.",
      "category": ["Data Analysis", "Machine Learning"],
      "techStack": [
        "Python",
        "Pandas",
        "Scikit-learn",
        "XGBoost",
        "TensorFlow",
        "Matplotlib",
        "Seaborn",
        "Tableau"
      ],
      "link": "https://github.com/azizbeksiddikov/singapore-flat-resale"
    },
    {
      "id": 4,
      "priority": 2,
      "image": "/project_images/ai_ml_jobs.png",
      "title": "AI and ML Job Listings in the USA (2022-2024)",
      "description": "This project analyzes AI and ML job listings in the USA from 2022 to 2024, providing insights into trends, sector demands, and skills gaps. It explores key patterns such as job distribution over time, sector-wise demand, experience levels, and contract types. The project also highlights skills like machine learning, Python, and data handling that are frequently required in job listings. Visualizations, including trend analysis and word clouds, reveal the growing demand for AI/ML professionals, especially in software development and IT sectors.",
      "category": ["Data Analysis", "Job Market Analysis", "Visualization"],
      "techStack": [
        "Python",
        "Pandas",
        "Matplotlib",
        "Seaborn",
        "Wordcloud",
        "SQL"
      ],
      "link": "https://github.com/azizbeksiddikov/ai-ml-job-listing"
    },
    {
      "id": 5,
      "priority": 2,
      "image": "/project_images/sales.jpg",
      "title": "Sales Data Analysis",
      "description": "This project analyzes retail sales data from a global superstore to identify trends, seasonal effects, and key performance indicators (KPIs). Using time series analysis, the project forecasts the sales of the next 7 days from the last available date in the training dataset. Key elements of the analysis include customer demographics, product categories, and sales patterns, helping to understand sales behavior and predict future trends in the retail sector.",
      "category": ["Data Analysis", "Time Series", "Sales Forecasting"],
      "techStack": [
        "Python",
        "Pandas",
        "Matplotlib",
        "Seaborn",
        "Statsmodels",
        "Scikit-learn"
      ],
      "link": "https://github.com/azizbeksiddikov/sales-data-analysis"
    },
    {
      "id": 6,
      "priority": 2,
      "image": "/project_images/murder.jpg",
      "title": "SQL Murder Mystery Project",
      "description": "This project uses SQL queries to solve a murder mystery by analyzing a database of crime scene reports, witness statements, suspects' details, and evidence. The analysis includes identifying suspects based on their gym membership, vehicle registration, and physical descriptions, along with gathering additional information from Facebook check-ins and income records. The final investigation uncovers the true culprit behind the crime, demonstrating advanced SQL skills such as JOINs, WHERE clauses, and data retrieval across multiple tables.",
      "category": ["SQL", "Data Analysis", "Investigation"],
      "techStack": ["SQL", "Kaggle Dataset", "Google Docs", "SQL Queries"],
      "link": "https://github.com/azizbeksiddikov/sql-murder-mystery"
    },
    {
      "id": 7,
      "priority": 0,
      "image": "/project_images/color_detection.jpeg",
      "title": "Real-Time Color Detection Using OpenCV",
      "description": "A real-time color detection system that uses computer vision to identify and track custom color or predefined 16 standard web colors. The system processes webcam feed to detect objects of specific colors, with particularly robust detection of yellow objects. It features real-time object tracking, video recording capabilities, and optimized HSV color ranges for accurate detection.",

      "category": ["Computer Vision", "Real-Time Processing"],
      "techStack": ["Python", "OpenCV", "NumPy"],
      "link": "https://github.com/azizbeksiddikov/color-detection"
    },
    {
      "id": 8,
      "priority": 2,
      "image": "/project_images/compare-ocr.jpg",
      "title": "Text Detection & OCR Comparison",
      "description": "This project demonstrates the preprocessing of textual data from CSV, performing OCR with Tesseract and EasyOCR, and comparing their performance based on similarity scores and processing times. It includes instructions on setting up the environment, running the notebook, and evaluating results",

      "category": [
        "Computer Vision",
        "OCR",
        "Text Detection",
        "Machine Learning"
      ],
      "techStack": [
        "Python",
        "Tesseract",
        "EasyOCR",
        "Jupyter Notebook",
        "Pandas"
      ],
      "link": "https://github.com/azizbeksiddikov/compare-ocr"
    },
    {
      "id": 9,
      "priority": -1,
      "image": "/project_images/plate-recognition.jpeg",
      "title": "License Plate Recognition Project",
      "description": "This project implements a robust license plate recognition system that processes video footage in real-time using advanced computer vision and machine learning techniques. It detects vehicles with YOLO (trained on the COCO dataset), tracks them using the SORT algorithm, and identifies license plates with a custom YOLO model. The plates are then decoded using EasyOCR, optimized for German license plate formats (e.g., 'CCNNCCC'). \nThe system outputs annotated videos and structured CSV files containing details like vehicle IDs, license plate text, confidence scores, timestamps, and vehicle types. Designed for traffic monitoring, automated tolls, and parking systems, it delivers high accuracy and scalability with a modular architecture and reusable components. ",

      "category": [
        "Computer Vision",
        "OCR",
        "Deep Learning",
        "Video Processing",
        "License Plate Recognition (LPR/ALPR)"
      ],
      "techStack": ["Python", "YOLO", "EasyOCR", "OpenCV", "SORT", "Pandas"],
      "link": "https://github.com/azizbeksiddikov/plate-recognition"
    }
  ]
}
